from collections import defaultdict
from pathlib import Path

import click
import numpy as np
import pandas as pd


@click.command()
@click.argument(
    "file",
    type=click.Path(exists=True, dir_okay=False, path_type=Path),
)
@click.option(
    "--quiet",
    is_flag=True,
    help="Suppress output. I.e., does not print the dataframe.",
)
@click.option(
    "--plot/--no-plot",
    is_flag=True,
    default=True,
    show_default=True,
    help="Show plots.",
)
def main(
    file: Path,
    quiet: bool,
    plot: bool,
) -> None:
    """
    Read a measurements file generated by 'eval_limesdr_fpga.py'
    and plots the PER/SNR curve, plus CFO values.
    """
    expected_payload = np.arange(100, dtype=np.uint8)
    num_bits = len(expected_payload) * 8

    data = defaultdict(list)
    with open(file) as f:
        for line in f.read().splitlines():
            if line.startswith("CFO"):
                cfo, sto = line.split(",")
                data["cfo"].append(float(cfo.split("=")[1]))
                data["sto"].append(int(sto.split("=")[1]))
            elif line.startswith("SNR"):
                snr, txp = line.split(",")
                data["snr"].append(float(snr.split("=")[1]))
                data["txp"].append(int(txp.split("=")[1]))
            elif line.startswith("packet"):
                *_, payload = line.split(",", maxsplit=2)
                payload = list(map(int, payload.split("=")[1][1:-1].split(",")))
                ber = (
                    np.unpackbits(
                        expected_payload ^ np.array(payload, dtype=np.uint8)
                    ).sum()
                    / num_bits
                )
                invalid = 1 if ber > 0 else 0
                data["ber"].append(ber)
                data["invalid"].append(invalid)

    if not quiet or plot:
        df = pd.DataFrame.from_dict(data)
        if not quiet:
            click.echo(df)

        if plot:
            df.groupby("txp").hist(column="cfo").show()


if __name__ == "__main__":
    main()
